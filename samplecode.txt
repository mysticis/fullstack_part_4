beforeEach(async () => {
  await Blog.deleteMany({})
  let blogObject = new Blog(blogList[0])
  await blogObject.save()

  blogObject = new Blog(blogList[1])
  await blogObject.save()

  blogObject = new Blog(blogList[2])
  await blogObject.save()
})
test("should return the right amount of blogs", async () => {
  const response = await api.get("/api/blogs")
  expect(response.body.length).toBe(3)
})
test("should return the blogs in json format", async () => {
  await api
    .get("/api/blogs")
    .expect(200)
    .expect("Content-Type", /application\/json/)
})
test("should verify the existence of id property in response", async () => {
  const response = await api.get("/api/blogs")
  for (let blog of response.body) {
    expect(blog.id).toBeDefined()
  }
})
test("should verify a new blog has been created", async () => {
  const newBlog = new Blog({
    title: "a blog created",
    author: "John",
    url: "http://devopsinpractice.com",
    likes: 6
  })
  await api
    .post("/api/blogs")
    .send(newBlog)
    .expect(201)
    .expect("content-type", /application\/json/)
  const blogsInDb = await Blog.find({})
  blogsInDb.map(blog => blog.toJSON())
  expect(blogsInDb.length).toBe(blogList.length + 1)
})
test("should default likes to zero in a blog without the like property", async () => {
  const blogWithoutLikes = new Blog({
    title: "test blog without likes",
    author: "Joe",
    url: "myurl.com"
  })
  await api
    .post("/api/blogs")
    .send(blogWithoutLikes)
    .expect(201)
    .expect("content-type", /application\/json/)
  const blogsInDb = await Blog.find({})
  const blogsindatabase = blogsInDb.map(blogs => blogs.toJSON())
  for (let blog of blogsindatabase) {
    if (!blog.hasOwnProperty("likes")) {
      blog.likes = 0
    }
  }
  expect(blogsindatabase[3].likes).toBe(0)
})
test("should reject an incomplete request", async () => {
  const blogWithoutTitleAndUrl = new Blog({
    author: "John",
    likes: 2
  })
  await api
    .post("/api/blogs")
    .send(blogWithoutTitleAndUrl)
    .expect(400)
})

afterAll(() => mongoose.connection.close())
